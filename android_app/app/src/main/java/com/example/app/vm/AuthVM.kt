package com.example.app.vm

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.app.data.*          // ‚Üê ApiClient, ApiResult, LoginReq‚Ä¶
import com.example.app.data.TokenStore

import kotlinx.coroutines.launch
import java.security.MessageDigest
import java.util.*

class AuthVM : ViewModel() {

    val loading = mutableStateOf(false)
    val error = mutableStateOf<String?>(null)

    /**
     * ÁôªÂΩï
     * @param onSuccess ÁôªÂΩïÊàêÂäüÂêéÂõûË∞ÉÔºàÂú® ViewModel scopeÔºåUI Â±ÇÁõ¥Êé•Ë∞ÉÁî®Ôºâ
     */
    fun login(emailOrName: String, plainPwd: String, onSuccess: () -> Unit) {
        if (loading.value) return          // ÈÅøÂÖçÈáçÂ§çÁÇπÂáª

        viewModelScope.launch {
            loading.value = true
            error.value = null

            // üëâ ÂêéÁ´ØÊúüÂæÖ pwd_hashÔºåËøôÈáåÁÆÄÂçïÂÅö SHA‚Äë256Ôºõ‰Ω†ÂèØ‰ª•Êç¢Êàê‰Ω†ÂêéÁ´Ø‰∏ÄËá¥ÁöÑÁÆóÊ≥ï
            val pwdHash = sha256(plainPwd)

            when (val r = ApiClient.call {
                login(
                    LoginReq(
                        name_or_email = emailOrName,
                        pwd_hash = pwdHash,
                        maintain_online = true
                    )
                )
            }) {
                is ApiResult.Ok -> {
                    val token = r.body.accessToken
                    // Êää token Â≠òÊú¨Âú∞Ôºå‰æõÂêéÁª≠Êé•Âè£‰ΩøÁî®
                    TokenStore.saveToken(token)
                    loading.value = false
                    onSuccess()
                }

                is ApiResult.BizError -> {
                    loading.value = false
                    error.value = r.msg
                }

                is ApiResult.NetError -> {
                    loading.value = false
                    error.value = r.throwable.message
                }
            }
        }
    }

    /* ---------------- Ê≥®ÂÜå ---------------- */
    fun register(name: String, email: String, plainPwd: String, onSuccess: () -> Unit) {
        if (loading.value) return
        viewModelScope.launch {
            loading.value = true; error.value = null
            val pwdHash = sha256(plainPwd)

            when (val r = ApiClient.call {
                register(RegisterReq(name = name, email = email, pwd_hash = pwdHash))
            }) {
                is ApiResult.Ok -> {
                    loading.value = false; onSuccess()
                }

                is ApiResult.BizError -> {
                    loading.value = false; error.value = r.msg
                }

                is ApiResult.NetError -> {
                    loading.value = false; error.value = r.throwable.message
                }
            }
        }
    }

    fun loginWithServer(
        serverUrl: String,
        emailOrName: String,
        plainPwd: String,
        onSuccess: () -> Unit
    ) = viewModelScope.launch {
        ServerStore.save(serverUrl.trimEnd('/'))   // ÊåÅ‰πÖÂåñ
        login(emailOrName, plainPwd, onSuccess)    // Ë∞ÉÁî®Â∑≤Êúâ login()
    }

    /** ÊúÄÁ≤óÊö¥ÁöÑ SHA‚Äë256 -> hex */
    private fun sha256(src: String): String =
        MessageDigest.getInstance("SHA-256")
            .digest(src.toByteArray())
            .joinToString("") { "%02x".format(it) }
}


